
services:
  identity:
    build:
      context: ./identity_service
    container_name: identity
    env_file: 
      - ./identity_service/.env
    volumes:
      - identity_static:/app/staticfiles
    expose:
      - "8000"
    networks:
      - backend_network 
      - storage_network
  
  users:
    build:
      context: ./users_service
    container_name: users
    env_file: 
      - ./users_service/.env
    volumes:
      - users_static:/app/staticfiles
      - ./users_service/media/profiles:/app/media/profiles
      - ./users_service/media/banners:/app/media/banners 
    expose:
      - "8000"
    networks:
      - backend_network
      - storage_network
    environment:
      - EXTERNAL_BASE_URL=http://localhost

  presentation:
    build:
      context: ./presentation_service
    container_name: presentation
    env_file: 
      - ./presentation_service/.env
    volumes:
      - presentation_static:/app/staticfiles
      - ./presentation_service/media/illustrations:/app/media/illustrations
    expose:
      - "8000"
    networks:
      - backend_network
      - storage_network
    environment:
      - USERS_SERVICE_URL=http://users:8000

  nginx:
    build:
      context: ./nginx
    container_name: nginx_reverse_proxy 
    volumes:
      - identity_static:/static/identity
      - users_static:/static/users 
      - ./users_service/media/profiles:/etc/nginx/html/media/profiles
      - ./users_service/media/banners:/etc/nginx/html/media/banners
      - ./presentation_service/media/illustrations:/etc/nginx/html/media/illustrations
      - presentation_static:/static/presentation 
    ports:
      - "80:80"
    depends_on:
      - identity
      - users
      - presentation
    networks:
      - backend_network
      - storage_network
  
  vault:
    build:
      context: ./vault
    container_name: vault
    volumes:
      - vault_data:/vault/data
      - ./vault/config:/vault/config
    environment:
      VAULT_ADDR: "https://127.0.0.1:8200"
      VAULT_API_ADDR: "https://vault:8200"
      HTTP_PROXY: "http://tinyproxy:8888"
      HTTPS_PROXY: "http://tinyproxy:8888"
      NO_PROXY: "localhost,127.0.0.1,::1,vault"
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      VAULT_SKIP_VERIFY: "true" 
    networks:
      - storage_network
    cap_add:
      - IPC_LOCK
    depends_on:
      - tinyproxy
  
  openldap:
    build:
      context: ./openldap 
    container_name: openldap 
    environment:
      LDAP_ROOT: ${LDAP_ADMIN_TREE}
      LDAP_ADMIN_USERNAME: ${LDAP_ROOT_USERNAME}
      LDAP_ADMIN_PASSWORD: ${LDAP_ROOT_PASSWORD}
      LDAP_USERS: ${LDAP_ADMIN_USERNAME}
      LDAP_PASSWORDS: ${LDAP_ADMIN_PASSWORD}
    networks:
      - storage_network
    volumes:
      - openldap_data:/bitnami/openldap

  tinyproxy:
    build:
      context: ./tinyproxy
    container_name: tinyproxy
    ports:
      - "8888:8888"
    networks:
      - storage_network
      - public_network


networks:
  backend_network:
    driver: bridge 
  storage_network:
    internal: true 
  public_network:
    driver: bridge

volumes:
  identity_static: 
  users_static:
  presentation_static:
  vault_data:
  openldap_data:
