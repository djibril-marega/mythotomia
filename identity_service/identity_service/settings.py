"""
Django settings for identity_service project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
from decouple import config 
from django.utils.translation import gettext_lazy as _
from auth_app.utils.connection import connect_to_vault, get_secrets_in_vault

LANGUAGES = [
    ('en', _('English')),
    ('es', _('Spanish')),
    ('zh', _('Chinese')),
    ('hi', _('Hindi')),
    ('ar', _('Arabic')),
    ('fr', _('French')),
    ('ru', _('Russian')),
    ('pt', _('Portuguese')),
    ('bn', _('Bengali')),
    ('ja', _('Japanese')),
    ('de', _('German')),
    ('ko', _('Korean')),
    ('it', _('Italian')),
    ('tr', _('Turkish')),
    ('vi', _('Vietnamese')),
    ('pl', _('Polish')),
    ('nl', _('Dutch')),
    ('sv', _('Swedish')),
    ('fa', _('Persian')),
    ('th', _('Thai')),
]


DEBUG = config('DEBUG', default=False, cast=bool)
VAULT_ADDR=config('VAULT_ADDR')
VAULT_TOKEN=config('VAULT_TOKEN')
SECRET_DB_PATH=config('SECRET_DB_PATH')
VAULT_PATH_AWS_IAM=config('SECRET_AWS_IAM_PATH')
VAULT_PATH_AWS_SMTP=config('SECRET_AWS_SMTP_PATH')
VAULT_PATH_REDIS=config('SECRET_REDIS_PATH') 
VAULT_PATH_DJANGO=config('SECRET_DJANGO_PATH')
RSA_KEY_NAME=config('SECRET_RSA_KEY_NAME')
VAULT_MOUNT_POINT = config('MOUNT_POINT', default='secret')  # Default mount point for Vault secrets 

try:
    client=connect_to_vault(VAULT_ADDR, VAULT_TOKEN)
except Exception as e:
    raise RuntimeError(f"Error connecting to Vault or retrieving DB secrets: {e}")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
STATIC_URL = '/static/' 
STATICFILES_DIRS = [
    BASE_DIR / "static",  #  (optionnal)
]

LOGIN_URL= '/authentification/login'  # URL de redirection pour la connexion 

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
djangoCreds=get_secrets_in_vault(client, VAULT_PATH_DJANGO, VAULT_MOUNT_POINT)
SECRET_KEY = djangoCreds['DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = djangoCreds['DJANGO_DEBUG']

ALLOWED_HOSTS = [djangoCreds['DJANGO_ALLOWED_HOSTS']]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'auth_app',
    'settings_app',
    'tasks',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'identity_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'identity_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
credsUserDB=get_secrets_in_vault(client, SECRET_DB_PATH, VAULT_MOUNT_POINT) 
if credsUserDB is None:
    raise ValueError("Database credentials not found in Vault")

for key in credsUserDB:
    if isinstance(credsUserDB[key], bytes):
        credsUserDB[key] = credsUserDB[key].decode('utf-8')
    elif not isinstance(credsUserDB[key], str):
        credsUserDB[key] = str(credsUserDB[key])


DATABASES = {
    'default': { 
        
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': credsUserDB['DB_NAME'],
        'USER': credsUserDB['DB_USER'],
        'PASSWORD': credsUserDB['DB_PASSWORD'], 
        'HOST': credsUserDB['DB_HOST'], 
        'PORT': int(credsUserDB['DB_PORT']),
        'OPTIONS': {
            'options': '-c client_encoding=UTF8',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'auth_app.CustomUser'


# Email settings
# https://docs.djangoproject.com/en/5.2/topics/email/
awsmtpCreds=get_secrets_in_vault(client, VAULT_PATH_AWS_SMTP, VAULT_MOUNT_POINT) 

if awsmtpCreds is None:
    raise ValueError("AWS SES credentials not found in Vault. Please check your configuration.") 

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_HOST = awsmtpCreds['SMTP_HOST'] 
EMAIL_PORT = 587
EMAIL_USE_TLS = True 

EMAIL_HOST_USER = awsmtpCreds['SMTP_USERNAME']
EMAIL_HOST_PASSWORD = awsmtpCreds['SMTP_PASSWORD']
DEFAULT_FROM_EMAIL = awsmtpCreds['SMTP_EMAIL'] 

redisCreds=get_secrets_in_vault(client, VAULT_PATH_REDIS, VAULT_MOUNT_POINT)
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://:'+redisCreds['REDIS_PASSWORD']+'@'+redisCreds['REDIS_SRV_IP']+':6379/1', 
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

CELERY_BROKER_URL = "redis://:"+redisCreds['REDIS_PASSWORD']+"@"+redisCreds['REDIS_SRV_IP']+":6379/0"
CELERY_ACCEPT_CONTENT = ["json"]  
CELERY_TASK_SERIALIZER = "json" 
